<?php
/**
 * Plugin Name: Spiralps Shipping
 * Plugin URI: 
 * Description: Weight based shipping method for Woocommerce.
 * Version: 1.0.
 * Author: INTERNET MARKETING SOLUTIONS SARL

*/

add_action('plugins_loaded', 'init_spiralps_shipping', 0);

function init_spiralps_shipping() {

    if ( ! class_exists( 'WC_Shipping_Method' ) ) return;
    
class spiralps_Shipping extends WC_Shipping_Method {

    function __construct() { 
     
                $this->id 			= 'spiralps_shipping';
                $this->method_title 		= __( 'Spiralps Weight', 'woocommerce' );
		
		$this->admin_page_heading 	= __( 'Weight based shipping', 'woocommerce' );
		$this->admin_page_description 	= __( 'Define shipping by weight and country', 'woocommerce' );
              
               
                add_action( 'woocommerce_update_options_shipping_' . $this->id, array( &$this, 'sync_countries' ) );
		add_action( 'woocommerce_update_options_shipping_' . $this->id, array( &$this, 'process_admin_options' ) );

    	$this->init();
        $this->display_country_groups();        
    }

    /**
     * init function
     */
    function init() {
    
            $this->init_form_fields();
            $this->init_settings();

                $this->enabled		  = $this->settings['enabled'];
                $this->title 		  = $this->settings['title'];
                
                $this->swisspost_username = $this->settings['swisspost_username'];
                $this->swisspost_password = $this->settings['swisspost_password'];
                $this->swisspost_franking = $this->settings['swisspost_franking'];
                
                $this->country_group_no   = $this->settings['country_group_no'];
                $this->sync_countries     = $this->settings['sync_countries'];
                $this->availability       = 'specific';
                $this->countries 	  = $this->settings['countries'];
                $this->type               = 'order';
                $this->tax_status	  = $this->settings['tax_status'];
                $this->fee                = $this->settings['fee'];
                $this->options 		  = isset( $this->settings['options'] ) ? $this->settings['options'] : '';
                $this->options		  = (array) explode( "\n", $this->options );
    }
    
    function init_form_fields() {

    global $woocommerce;

        $this->form_fields = array(
			'enabled' => array(
				'title' 		=> __( 'Enable/Disable', 'woocommerce' ),
				'type' 			=> 'checkbox',
				'label' 		=> __( 'Enable this shipping method', 'woocommerce' ),
				'default' 		=> 'no',
			),
			
			'title' => array(
				'title' 		=> __( 'Method Title', 'woocommerce' ),
				'type' 			=> 'text',
				'description' 	=> __( 'This controls the title which the user sees during checkout.', 'woocommerce' ),
				'default'		=> __( 'Weight Based Shipping', 'woocommerce' ),
			),

			'swisspost_username' => array(
				'title'			=> 'Username (Swisspost API)',
				'type'			=> 'text',
			),
			
			'swisspost_password' => array(
				'title'			=> 'Password (Swisspost API)',
				'type'			=> 'text',
			),
			
			'swisspost_franking' => array(
				'title'			=> 'Franking Licence (Swisspost API)',
				'type'			=> 'text',
			),
			
			
			
        			'tax_status' => array(
							'title' 		=> __( 'Tax Status', 'woocommerce' ),
							'type' 			=> 'select',
							'description' 	=> '',
							'default' 		=> 'taxable',
							'options'		=> array(
								'taxable' 	=> __( 'Taxable', 'woocommerce' ),
								'none' 		=> __( 'None', 'woocommerce' ),
							),
						),
                           'fee' => array(
                                                    'title' 		=> __( 'Handling Fee', 'woocommerce' ),
                                                    'type' 			=> 'text',
                                                    'description'	=> __( 'Fee excluding tax. Enter an amount, e.g. 2.50. Leave blank to disable.', 'woocommerce' ),
                                                    'default'		=> '',
                                            ),
                       'options' => array(
                                                    'title' 		=> __( 'Shipping Rates', 'woocommerce' ),
                                                    'type' 			=> 'textarea',
                                                    'description'	=> __( 'Set your weight based rates for country groups (one per line). Example: <code>Max weight|Cost|country group number</code>. Example: <code>100|6.95|3</code>.', 'woocommerce' ),
                                                    'default'		=> '',
                                            ),
              'country_group_no' => array(
                                                    'title' 		=> __( 'Number of country groups', 'woocommerce' ),
                                                    'type' 			=> 'text',
                                                    'description'	=> __( 'Number of groups of countries sharing delivery rates (hit "Save changes" button after you have changed this setting).' ),
                                                    'default' 		=> '3',
                                            ),
                'sync_countries' => array(
                                                    'title' 		=> __( 'Add countries to allowed', 'woocommerce' ),
                                                    'type' 			=> 'checkbox',
                                                    'label' 		=> __( 'Countries added to country groups will be automatically added to Allowed Countries 
                                                                                    in <a href="/wp-admin/admin.php?page=woocommerce_settings&tab=general">General settings tab.</a>
                                                                                    This makes sure countries defined in country groups are visible on checkout.
                                                                                    Deleting country from country group will not delete country from Allowed Countries.', 'woocommerce' ),
                                                    'default' 		=> 'no',
                                            )
                                            );
    }

    /*
    * Displays country group selects in shipping method's options
    */
    function display_country_groups() {

        global $woocommerce;  
    //   echo prp($this->settings['countries1']);
        $number = $this->country_group_no;
        for($counter = 1; $number >= $counter; $counter++) {

            $this->form_fields['countries'.$counter] =  array(
                    'title'     => sprintf(__( 'Country Group %s', 'woocommerce' ), $counter),
                    'type'      => 'multiselect',
                    'class'     => 'chosen_select',
                    'css'       => 'width: 450px;',
                    'default'   => '',
                    'options'   => $woocommerce->countries->countries
            );
        }    
    }

    /*
    * This method is called when shipping is calculated (or re-calculated)
    */  
    function calculate_shipping($package = array()) {

        global $woocommerce;

            $rates      = $this->get_rates_by_countrygroup($this->get_countrygroup($package));
            $weight     = $woocommerce->cart->cart_contents_weight;
            $final_rate = $this->pick_smallest_rate($rates, $weight);
            
            if($final_rate === false) return false;
            
            $taxable    = ($this->tax_status == 'taxable') ? true : false;
            
            
            if($this->fee > 0 && $package['destination']['country']) $final_rate = $final_rate + $this->fee;

                $rate = array(
                'id'        => $this->id,
                'label'     => $this->title,
                'cost'      => $final_rate,
                'taxes'     => '',
                'calc_tax'  => 'per_order'
                );
                
        $this->add_rate( $rate );
    }
    
    /*
    * Retrieves the number of country group for country selected by user on checkout 
    */        
    function get_countrygroup($package = array()) {    

            $counter = 1;

            while(is_array($this->settings['countries'.$counter])) {
                if (in_array($package['destination']['country'], $this->settings['countries'.$counter])) 
                    $country_group = $counter;

                $counter++;
            }
        return $country_group;
    }

    /*
    * Retrieves all rates available for selected country group
    */
    function get_rates_by_countrygroup($country_group = null) {

        $rates = array();
                if ( sizeof( $this->options ) > 0) foreach ( $this->options as $option => $value ) {

                    $rate = preg_split( '~\s*\|\s*~', trim( $value ) );

                    if ( sizeof( $rate ) !== 3 )  {
                        continue;
                    } else {
                        $rates[] = $rate;

                    }
                }

                foreach($rates as $key) {
                    if($key[2] == $country_group) {
                        $countrygroup_rate[] = $key;
                    }
                }
        return $countrygroup_rate;
    }

    /*
    * Picks the right rate from available rates based on cart weight
    */        
    function pick_smallest_rate($rates,$weight) {

    if($weight == 0) return 0; // no shipping for cart without weight

        if( sizeof($rates) > 0) foreach($rates as $key => $value) {

                if($weight <= $value[0]) {
                    $postage[] = $value[1];   
                }
                $postage_all_rates[] = $value[1];
        }

        if(sizeof($postage) > 0) {
            return min($postage);
                } else {
                if (sizeof($postage_all_rates) > 0) return max($postage_all_rates);
                }
        return false;    
    }

    /*
    * Uptades Allowed Countries with countries added to country groups
    */
    function sync_countries() {

        if($this->settings['sync_countries'] == 'yes') {
            $countries = $this->get_cg_countries();
            update_option('woocommerce_specific_allowed_countries', $countries);
        } 
    }
    /*
     * Retrieves countries from country groups and merges them with Allowed Countries array
     */
    function get_cg_countries() {    

                $counter = 1;
                $countries = array();

                    while(is_array($this->settings['countries'.$counter])) {
                        $countries = array_merge($countries, $this->settings['countries'.$counter]);

                    $counter++;
                    }
                    
            $allowed_countries = get_option( 'woocommerce_specific_allowed_countries' );

            if (is_array($allowed_countries)) $countries = array_merge($countries, $allowed_countries);
            $countries = array_unique($countries);
        return $countries;
    }

    function etz($etz) {
        
        if(empty($etz) || !is_numeric($etz)) {
            return 0.00;
        }
    }
    
    public function admin_options() {

    	?>
    	<h3><?php _e('Weight and Country based shipping', 'woocommerce'); ?></h3>
    	<p><?php _e('Lets you calculate shipping based on Country and weight of the cart. Lets you set unlimited weight bands on per country basis and group countries 
            that share same delivery cost/bands. For help and how to use go <a href="http://www.andyswebdesign.ie/blog/free-woocommerce-weight-and-country-based-shipping-extension-plugin/" target="_blank">here</a>', 'woocommerce'); ?></p>
    	<table class="form-table">
    	<?php
    		// Generate the HTML For the settings form.
    		$this->generate_settings_html();
    	?>
		</table><!--/.form-table-->
    	<?php
    }

  } // end spiralps_Shipping
}

/**
 * Add shipping method to WooCommerce
 **/
function add_spiralps_shipping( $methods ) {
	$methods[] = 'spiralps_shipping'; return $methods;
}

add_filter( 'woocommerce_shipping_methods', 'add_spiralps_shipping' );

/**
 * shipping barcodes
 */

add_action( 'add_meta_boxes', 'woocommerce_meta_boxes_spiralps_labels' );

function woocommerce_meta_boxes_spiralps_labels($mb){
	add_meta_box( 
		'woocommerce-spiralps_labels', 
		__( 'Spiralps Printed Delivery', 'woocommerce' ), 
		'woocommerce_spiralps_labels', 
		'shop_order', 
		'side', 
		'default'
	);
	return $mb;
}

function woocommerce_spiralps_labels(){
	global $post, $wpdb, $thepostid, $woocommerce, $theorder;
	
	$options = get_option( 'woocommerce_spiralps_shipping_settings' );
	
	$the_date = convert_date($theorder->order_date);
	
	$order = $theorder;
	$pdf_order = array(); $k = 0;
	foreach ($order->get_items() as $item){
		
		$_product = get_product( $item['variation_id'] ? $item['variation_id'] : $item['product_id'] );
		$pdf_order['items'][$k]['name'] = $item['name'];
		$pdf_order['items'][$k]['line_total'] = strip_tags(html_entity_decode($item['line_total']));
		$k++;
	}
	
	if ( $totals = $order->get_order_item_totals() ) {
		//var_dump($totals);
		foreach ( $totals as $key=>$value ) :
			if ($key == 'order_total') : 	
				$pdf_order['total']['label'] = $value['label'];
				$pdf_order['total']['value'] = strip_tags(html_entity_decode($value['value']));
			endif;
		endforeach;
	}

	//var_dump($pdf_order);
	//var_dump(json_encode($pdf_order));
	?>
	
	<input type="hidden" id="spiralps_address" value="<?php echo $theorder->get_formatted_billing_address()?>" />
	<input type="hidden" id="spiralps_order_details" value="<?php echo $option['order_details']?>" />
	
	<input type="hidden" id="spiralps_shipping_cost" value="<?php echo $theorder->order_shipping?>" />
	<input type="hidden" id="spiralps_shipping_method" value="<?php _e($theorder->get_shipping_method(), 'theretailer')?>" />
	
	<input type="hidden" value="<?php echo $options['swisspost_username']?>" name="swisspost_username" id="swisspost_username" />
	<input type="hidden" value="<?php echo $options['swisspost_password']?>" name="swisspost_password" id="swisspost_password" />
	<input type="hidden" value="<?php echo $options['swisspost_franking']?>" name="swisspost_franking" id="swisspost_franking" />
	
	<input type="hidden" value="<?php echo $theorder->shipping_first_name?>" id="spiralps_shipping_first_name" />
	<input type="hidden" value="<?php echo $theorder->shipping_last_name?>" id="spiralps_shipping_last_name" />
	<input type="hidden" value="<?php echo $theorder->shipping_address_1?>" id="spiralps_shipping_address_1" />
	<input type="hidden" value="<?php echo $theorder->shipping_address_2?>" id="spiralps_shipping_address_2" />
	<input type="hidden" value="<?php echo $theorder->shipping_postcode?>" id="spiralps_shipping_postcode" />
	<input type="hidden" value="<?php echo $theorder->shipping_city?>" id="spiralps_shipping_city" />
	<input type="hidden" value="<?php echo $theorder->billing_phone?>" id="spiralps_billing_phone" />
	<input type="hidden" value="<?php echo $theorder->billing_email?>" id="spiralps_billing_email" />
	
	<input type="button" class="button" id="spiralps_generate_labels" value="Generate Labels" />
	
	<?php 
	$order_meta = get_post_meta($theorder->id, "swisspost_shipping_file");
	$shipping_image = "";
	if ($order_meta){
		$shipping_image = plugins_url("/swisspost/outputfolder/" . $order_meta[0], __FILE__);
	}
	?>
	
	<a id="generated_response_a" href="#" target="_blank" style="margin-top:10px; display: block">
		<img id="generated_response_img" src="<?php echo $shipping_image?>" style="width:100%" />
	</a>
	
	<script type="text/javascript">
	jQuery(document).ready(function($){
		$('#spiralps_generate_labels').click(function(){
			var order_id = "<?php echo $theorder->id?>";

			var swisspost_username = $('#swisspost_username').val();
			var swisspost_password = $('#swisspost_password').val();
			var swisspost_franking = $('#swisspost_franking').val();
			
			var address = $('#spiralps_address').val();
			var shipping_address = $('#spiralps_shipping_address').val();

			var shipping_first_name = $('#spiralps_shipping_first_name').val();
			var shipping_last_name = $('#spiralps_shipping_last_name').val();
			var shipping_address_1 = $('#spiralps_shipping_address_1').val();
			var shipping_address_2 = $('#spiralps_shipping_address_2').val();
			var billing_phone = $('#spiralps_billing_phone').val();
			var billing_email = $('#spiralps_billing_email').val();

			
			if (shipping_address_2) {
				shipping_address_1 += ' ' + shipping_address_2;
			}
			var shipping_zip = $('#spiralps_shipping_postcode').val();
			var shipping_city = $('#spiralps_shipping_city').val();
			
			var info_account = $('#spiralps_account_number').val();
			var info_order = $('#spiralps_order_number').val();
			var info_invoice = $('#spiralps_invoice_number').val();
			var info_date = $('#spiralps_date_number').val();
			var info_side = $('#spiralps_side_number').val();
			var order_details = $('#spiralps_order_details').val();

			var shipping_cost = $('#spiralps_shipping_cost').val();
			var shipping_method = $('#spiralps_shipping_method').val();
			var cart_subtotal = $('#spiralps_cart_subtotal').val();
			var shipping_text = $('#spiralps_shipping_text').val();

			var item_total_label = '<?php echo $pdf_order['total']['label']?>';
			var item_total_value = '<?php echo $pdf_order['total']['value']?>';
			<?php foreach ($pdf_order['items'] as $key=>$value){
				echo "var item_name_$key = '" . $value['name'] . "';";
			}
			?>


			var data = {
				action: 'spiralps_generate',
				'order_id'			: order_id,
				'swisspost_username': swisspost_username,
				'swisspost_password': swisspost_password, 
				'swisspost_franking': swisspost_franking,
				'address'			: address,
				'shipping_address'	: shipping_address,
				'shipping_first_name'	: shipping_first_name,
				'shipping_last_name'	: shipping_last_name,
				'shipping_name'		: shipping_first_name + ' ' + shipping_last_name,
				'shipping_address_1': shipping_address_1,
				'shipping_zip'		: shipping_zip,
				'shipping_city'		: shipping_city,
				'billing_phone'		: billing_phone,
				'billing_email'		: billing_email,
				'info_account'		: info_account,
				'info_order'		: info_order,
				'info_invoice'		: info_invoice,
				'info_date'			: info_date,
				'info_side'			: info_side,
				'order_details'		: order_details,
				'items_json'		: '<?php echo serialize($pdf_order)?>',
				'item_total'		: '<?php echo count($order->get_items())?>',
				'item_total_label'	: item_total_label,
				'item_total_value'	: item_total_value,
				'shipping_cost'		: shipping_cost,
				'shipping_method'	: shipping_method,
				'cart_subtotal'		: cart_subtotal,
				'shipping_text'		: shipping_text,
				<?php foreach ($pdf_order['items'] as $key=>$value){
					echo "'item_name_$key' : '" . $value['name'] . "',";
				}
				?>
			};

			jQuery.post('<?php echo admin_url('admin-ajax.php')?>', data, function(response) {
			    var folder = '<?php echo plugins_url(NULL, __FILE__)?>';
			    var image_location = folder + '/swisspost/outputfolder/' + response.f_name;
			    $('#generated_response_img').attr('src', image_location);
			    $('#generated_response_a').attr('href', image_location);
			}, 'json');
			return false;
		});
	});
	</script>
	
	
	<?php 
}

function convert_date($date){
	$date = explode(" ", $date);
	$date = $date[0];
	$date = explode("-", $date);
	foreach ($date as $key=>$value){
		$date[$key] = (int)$value;
	}
	$date = $date[2] . '/' . $date[1] . ', ' . $date[0];
	
	return $date;
}

function ajax_spiralps_generate(){
	$frankinglicense = $_POST['swisspost_franking'];
	$items = unserialize(stripcslashes($_POST['items_json']));
	$cart_cost = 0;

	foreach ($items['items'] as $item){
		$cart_cost += $item['line_total'];
	}
	
	$cart_cost += $_POST['shipping_cost'];
	
	$username = $_POST['swisspost_username'];
	$password = $_POST['swisspost_password'];
	$endpoint_url = 'https://www.mypostbusiness.ch/wsbc/barcode/v2_2';
	$SOAP_wsdl_file_path=plugins_url('/swisspost/barcode_v2_2.wsdl', __FILE__);
	
	$SOAP_config = array(
		'location' => $endpoint_url,
		'login' => $username,
		'password' => $password,
	);
	try {
		$SOAP_Client = new SoapClient($SOAP_wsdl_file_path, $SOAP_config);
	}
	catch (SoapFault $fault) {
		echo('Error in SOAP Initialization: '. $fault -> __toString() .'<br/>');
		exit;
	}
	
	//include(plugins_url('/swisspost/wsbc-utils.php', __FILE__));
	//include("wsbc-utils.php");
	
	$generateLabelRequest = array(
	    'Language' => 'de',
	    'Envelope' => array(
	       	'LabelDefinition' => array(
		       	'LabelLayout' => 'A5',
		        'PrintAddresses' => 'RecipientAndCustomer',
		        'ImageFileType' => 'GIF',
		        'ImageResolution' => 300,
				'PrintPreview' => false
	        ),
	        'FileInfos' => array(
		         'FrankingLicense' => $frankinglicense,
				 'PpFranking' => false,
		         'Customer' => array(
			         'Name1' => $_POST['shipping_name'],
	         		 // 'Name2' => 'Generalagentur',
			         'Street' => $_POST['shipping_address_1'],
			         // 'POBox' => 'Postfach 600',
			         'ZIP' => $_POST['shipping_zip'],
			         'City' => $_POST['shipping_city'],
			         // 'Country' => 'CH',
			         // 'Logo' => $logo_binary_data,
	         		 // 'LogoFormat' => 'GIF',
			         //'DomicilePostOffice' => '3000 Bern'
	      		 ),
				 'CustomerSystem' => 'PHP Client System'
	   		),
		    'Data' => array(
		        'Provider' => array(
		            'Sending' => array(
		            	//'SendingID' => 'auftragsreferenz',
						'Item' => array(
							array( // 1.Item ...
								'ItemID' => $_POST['order_id'],
								// 'ItemNumber' => '12345678',
								 //'IdentCode' => $_POST['order_id'],
								'Recipient' => array(
									//'PostIdent' => 'IdentCodeUser',
	//								'Title' => 'Frau',
									'Vorname' => $_POST['shipping_first_name'],
									'Name1' => $_POST['shipping_last_name'],
									//'Name2' => 'Müller AG',
									'Street' => $_POST['shipping_address_1'],
	//								'HouseNo' => '21',
									//'FloorNo' => '1',
									//'MailboxNo' => '1111',
									'ZIP' => $_POST['shipping_zip'],
									'City' => $_POST['shipping_city'],
									//'Country' => 'CH',
									'Phone' => $_POST['billing_phone'],
									'EMail' => $_POST['billing_email']
								),
								'Attributes' => array(
									'PRZL' => array(
										// At least one code is required (schema validation)
	
										// Basic service code(s) (optional, default="ECO"):
										'PRI',
										// Additional service codes (optional)
										'N',
										'FRA',
										// Delivery instruction codes (optional)
										'ZAW3211',
										'ZAW3213'
									),
	
									// Cash on delivery amount in CHF for service 'N':
									'Amount' => $cart_cost,
									//'FreeText' => 'Freitext',
									// 'DeliveryDate' => '2010-06-19',
									// 'ParcelNo' => 2,
									// 'ParcelTotal' => 5,
									// 'DeliveryPlace' => 'Vor der Haustüre',
									'ProClima' => true
								)
							)
						)
					)
				)
			)
		)
	);
	
	
	// 2. Web service call
	$response = null;
	try {
		$response = $SOAP_Client -> GenerateLabel($generateLabelRequest);
	}
	catch (SoapFault $fault) {
		echo('Error in GenerateLabel: '. $fault -> __toString() .'<br />');
	}
	
	// 3. Process requests: save label images and check for errors
	// (see documentation of structure in "Handbuch Webservice Barcode", section 4.3.2)
	foreach (getElements($response->Envelope->Data->Provider->Sending->Item) as $item) {
		if (@$item->Errors != null) {
	
	      	// Error in Label Request Item:
	      	// This barcode label was not generated due to errors.
	      	// The received error messages are returned in the specified language of the request.
	      	// This means, that the label was not generated,
	      	// but other labels from other request items in same call
	      	// might have been generated successfully anyway.
	      	$errorMessages = "";
	      	$delimiter="";
	      	foreach (getElements($item->Errors->Error) as $error) {
	      		$errorMessages .= $delimiter.$error->Message;
	      		$delimiter=",";
	      	}
	      	echo '<p>ERROR for item with itemID='.$item->ItemID.": ".$errorMessages.'.<br/></p>';
	
		}
	    else {
	      	// Get successfully generated label as binary data:
	      	$identCode = $item->IdentCode;
	   		$labelBinaryData = $item->Label;
	
		   	// Save the binary image data to image file:
		   	
	   		$f_name = 'testOutput_GenerateLabel_'.$identCode.'.gif';
	   		
		   	$filename = 'outputfolder/' . $f_name;
		   	$filename = '../wp-content/plugins/spiralps-shipping/swisspost/outputfolder/' . $f_name;
		   	file_put_contents($filename, $labelBinaryData);
		   	
		   	/**
		   	 * it's used in my plugin
		   	 */
		   	delete_post_meta($_POST['order_id'], "swisspost_shipping_file");
		   	delete_post_meta($_POST['order_id'], "swisspost_shipping_ident_code");
		   	
		   	add_post_meta($_POST['order_id'], "swisspost_shipping_file", $f_name);
		   	add_post_meta($_POST['order_id'], "swisspost_shipping_ident_code", $identCode);
		   	
		   	$message = array();
		   	$message['identCode'] = $identCode;
		   	$message['f_name'] = $f_name;
		   	$message['fileName'] = $filename;
		   	$message['ok'] = "OK";
		   	echo json_encode($message);die();
		   	
		   	// Printout some label information (and warnings, if any):
			echo '<p>Label generated successfully for identCode='.$identCode.': <br/>';
			if (isset($item->Warnings) && $item->Warnings != null) {
				$warningMessages = "";
		      	foreach (getElements($item->Warnings->Warning) as $warning) {
		      		$warningMessages .= $warning->Message.",";
		      	}
		      	echo 'with WARNINGS: '.$warningMessages.'.<br/>';
		    }
			echo $filename.':<br/><img src="'.$filename.'"/><br/>';
			echo '</p>';
		}
	}
	
	echo "</body></html>";
	
	
	/**
	 * save post meta;
	 */
}

add_action('wp_ajax_spiralps_generate', 'ajax_spiralps_generate');

function getElements($root) {
	if ($root==null) {
		return array();
	}
	if (is_array($root)) {
		return $root;
	}	
	else {
		// simply wrap a single value or object into an array		
		return array($root);
	}
}

function toCommaSeparatedString($strings) {
	$res = "";
	$delimiter = "";
	foreach ($strings as $str) {
		$res .= $delimiter.$str;		
		$delimiter = ", ";
	}
	return $res;
}  
?>
